- name: 0. Clean up existing Certbot setup if present
  become: true
  block:
    - name: Check if Certbot directory exists
      ansible.builtin.stat:
        path: "/etc/letsencrypt/live/{{ keycloak_domain }}"
      register: certbot_dir

    - name: Remove existing Certbot certificates and configurations
      ansible.builtin.file:
        path: "/etc/letsencrypt/live/{{ keycloak_domain }}"
        state: absent
      when: certbot_dir.stat.exists

    - name: Remove existing Nginx configuration
      ansible.builtin.file:
        path: "/etc/nginx/sites-enabled/keycloak"
        state: absent
      ignore_errors: true

    - name: Remove existing Nginx configuration (sites-available)
      ansible.builtin.file:
        path: "/etc/nginx/sites-available/keycloak"
        state: absent
      ignore_errors: true

- name: 1. Install prerequisite packages
  become: true
  ansible.builtin.apt:
    name: ['ca-certificates', 'curl', 'nginx', 'certbot', 'python3-certbot-nginx']
    state: present
    update_cache: true

- name: 2. Add Docker's official GPG key
  become: true
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'
    force: true

- name: 3. Add Docker repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: 4. Install Docker Engine and Compose
  become: true
  ansible.builtin.apt:
    name: ['docker-ce', 'docker-ce-cli', 'containerd.io', 'docker-buildx-plugin', 'docker-compose-plugin']
    state: present
    update_cache: true

- name: 5. Add user to the docker group
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true

- name: 6a. Check if swap file exists
  become: true
  ansible.builtin.stat:
    path: /swapfile
  register: swap_file_check

- name: 6b. Create 1GB swap file if it doesn't exist
  become: true
  ansible.builtin.command: dd if=/dev/zero of=/swapfile bs=1M count=1024
  when: not swap_file_check.stat.exists

- name: 6c. Set swap file permissions
  become: true
  ansible.builtin.file:
    path: /swapfile
    mode: '0600'
  when: not swap_file_check.stat.exists

- name: 6d. Set up swap area
  become: true
  ansible.builtin.command: mkswap /swapfile
  when: not swap_file_check.stat.exists

- name: 6e. Enable swap
  become: true
  ansible.builtin.command: swapon /swapfile
  when: not swap_file_check.stat.exists
  ignore_errors: true

- name: 6f. Add swap to fstab for persistence across reboots
  become: true
  ansible.builtin.lineinfile:
    path: /etc/fstab
    line: '/swapfile none swap sw 0 0'
    state: present
  when: not swap_file_check.stat.exists

- name: 6. Create deployment directory on server
  ansible.builtin.file:
    path: /home/ubuntu/keycloak
    state: directory
    mode: '0755'

- name: 7. Copy Keycloak .env file from template
  ansible.builtin.template:
    src: keycloak.env.j2
    dest: /home/ubuntu/keycloak/.env
    mode: '0640'

- name: 8. Copy docker-compose.yml file
  ansible.builtin.copy:
    src: docker-compose.yml
    dest: /home/ubuntu/keycloak/docker-compose.yml
    mode: '0644'

- name: 9. Ensure webroot directory exists for Certbot
  become: true
  ansible.builtin.file:
    path: /var/www/html
    state: directory
    mode: '0755'

- name: 10. Configure Nginx with initial setup (pre-SSL)
  become: true
  block:
    - name: Copy the initial Nginx config from template
      ansible.builtin.template:
        src: nginx.keycloak.conf.j2
        dest: /etc/nginx/sites-available/keycloak
        mode: '0644'
    - name: Enable the new Nginx site
      ansible.builtin.file:
        src: /etc/nginx/sites-available/keycloak
        dest: /etc/nginx/sites-enabled/keycloak
        state: link
    - name: Remove default Nginx site if present
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      ignore_errors: true

- name: 11. Restart Nginx to apply configuration
  become: true
  ansible.builtin.service:
    name: nginx
    state: restarted

- name: 12. Obtain SSL certificate from Let's Encrypt
  become: true
  ansible.builtin.command: >
    certbot --nginx -d {{ keycloak_domain }} --non-interactive --agree-tos -m {{ certbot_email }}

- name: 13. Ensure final Nginx configuration matches desired state
  become: true
  block:
    - name: Check if certbot successful
      ansible.builtin.stat:
        path: "/etc/letsencrypt/live/{{ keycloak_domain }}/fullchain.pem"
      register: cert_success
      
    - name: Update Nginx configuration to ensure all settings are applied
      ansible.builtin.template:
        src: nginx.keycloak.conf.j2
        dest: /etc/nginx/sites-available/keycloak
        mode: '0644'
      when: cert_success.stat.exists
      notify: Reload nginx

- name: 14. Start Keycloak service with Docker Compose
  become: true
  community.docker.docker_compose_v2:
    project_src: /home/ubuntu/keycloak
    state: present
    pull: always