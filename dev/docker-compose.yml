services:
  # -------------------------------------------
  # Core Infrastructure
  # -------------------------------------------

  # Unified PostgreSQL Database for all services
  ticketly-db:
    image: postgres:16 # Using a stable, recent version
    container_name: ticketly-postgres-db
    ports:
      - "5432:5432" # Use standard port for easier connection from local tools  
    environment:
      POSTGRES_USER: ticketly
      POSTGRES_PASSWORD: ticketly
    command: postgres -c wal_level=logical # Required for Debezium CDC
    volumes:
      - ticketly-postgres-data:/var/lib/postgresql/data
      - ./scripts/init-dbs.sh:/docker-entrypoint-initdb.d/init-dbs.sh # Mount the init script
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ticketly" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - infra-net

  # Keycloak for local authentication
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.4
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: ticketly-db
      KC_DB_URL_DATABASE: keycloak # The DB created by our script
      KC_DB_USERNAME: ticketly
      KC_DB_PASSWORD: ticketly
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: auth.ticketly.com # Your specified dev hostname
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
    ports:
      - "8080:8080"
    command: start-dev
    depends_on:
      ticketly-db:
        condition: service_healthy
    networks:
      - infra-net

  # MongoDB for Query Service
  query-db:
    image: mongo:latest
    container_name: query-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - infra-net
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:latest
    container_name: event-seating-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - infra-net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Broker in KRaft mode
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:29092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT://0.0.0.0:29092,CONTROLLER://kafka:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - infra-net
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 15s
      timeout: 10s
      retries: 10

  # Kafka UI for easy topic management and message browsing
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9000:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - infra-net

  # Debezium for Change Data Capture (CDC)
  debezium-connect:
    image: debezium/connect:2.5
    container_name: debezium-connect
    ports:
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
    networks:
      - infra-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/" ]
      interval: 10s
      timeout: 5s
      retries: 10

  # Debezium connector registration service
  debezium-connector-init:
    image: alpine:latest
    container_name: debezium-connector-init
    env_file:
      - .env
    depends_on:
      debezium-connect:
        condition: service_healthy
    volumes:
      - ./debezium:/debezium
      - ./scripts/init-debezium.sh:/scripts/init-debezium.sh
    command: >
      sh -c "
        apk add --no-cache curl gettext;
        /scripts/init-debezium.sh;
      "
    networks:
      - infra-net

  # -------------------------------------------
  # Application Services
  # -------------------------------------------

    # API Gateway
  api-gateway:
    image: ticketly/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8088:8088"
    environment:
      - KEYCLOAK_ISSUER_URI=http://auth.ticketly.com:8080/realms/event-ticketing
      - KEYCLOAK_JWK_SET_URI=http://auth.ticketly.com:8080/realms/event-ticketing/protocol/openid-connect/certs
      # Pointing to services potentially running on the host machine
      - EVENT_SEATING_SERVICE_URI=http://host.docker.internal:8081
      - EVENT_QUERY_SERVICE_URI=http://host.docker.internal:8082
      - ORDER_SERVICE_URI=http://host.docker.internal:8084
      - PAYMENT_SERVICE_URI=http://host.docker.internal:8085
    networks:
      - infra-net
    # 'host-gateway' is a special string that resolves to the host's internal IP
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "auth.ticketly.com:host-gateway"

  # Go Scheduler Service
  scheduler-service:
    image: ticketly/scheduler-service:latest
    container_name: scheduler-service
    environment:
      - EVENT_SERVICE_URL=http://event-command-service:8081/api/event-seating
      - KEYCLOAK_URL=http://auth.ticketly.com:8080
      - SCHEDULER_CLIENT_SECRET=${SCHEDULER_CLIENT_SECRET}
      - AWS_SQS_SESSION_ON_SALE_URL=${AWS_SQS_SESSION_ON_SALE_URL}
      - AWS_SQS_SESSION_CLOSED_URL=${AWS_SQS_SESSION_CLOSED_URL}
      - AWS_REGION=${AWS_REGION:-ap-south-1}
    volumes:
      - ~/.aws:/root/.aws:ro
    networks:
      - infra-net
    depends_on:
      - event-command-service

  # Event Seating Service (Command)
  event-command-service:
    image: ticketly/event-command-service:latest
    container_name: event-command-service
    ports:
      - "8081:8081"
    environment:
      - SERVER_PORT=8081
      - DATABASE_URL=jdbc:postgresql://ticketly-db:5432/event_service
      - DATABASE_USERNAME=ticketly
      - DATABASE_PASSWORD=ticketly
      - JWT_ISSUER_URI=http://auth.ticketly.com:8080/realms/event-ticketing
      - JWT_JWK_SET_URI=http://auth.ticketly.com:8080/realms/event-ticketing/protocol/openid-connect/certs
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KEYCLOAK_CLIENT_SECRET=${EVENTS_SERVICE_CLIENT_SECRET}
      # --- AWS variables remain as requested ---
      - AWS_REGION=${AWS_REGION:-ap-south-1}
      - AWS_SQS_SESSION_ON_SALE_QUEUE_ARN=${AWS_SQS_SESSION_ON_SALE_ARN}
      - AWS_SQS_SESSION_CLOSED_QUEUE_ARN=${AWS_SQS_SESSION_CLOSED_ARN}
      - AWS_SCHEDULER_ROLE_ARN=${AWS_SCHEDULER_ROLE_ARN}
      - AWS_SCHEDULER_GROUP_NAME=${AWS_SCHEDULER_GROUP_NAME}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - GOOGLE_APPLICATION_CREDENTIALS=/config/gcp-credentials.json
    depends_on:
      ticketly-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - infra-net
    volumes:
      - ~/.aws:/root/.aws:ro
      - ./credentials/gcp-credentials.json:/config/gcp-credentials.json:ro
    extra_hosts:
      - "auth.ticketly.com:host-gateway"

  # Event Query Service
  event-query-service:
    image: ticketly/event-query-service:latest
    container_name: event-query-service
    ports:
      - "8082:8082"
    depends_on:
      query-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      event-command-service:
        condition: service_healthy
    environment:
      - MONGODB_URI=mongodb://query-db:27017/event-seating
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - COMMAND_SERVICE_URL=http://event-command-service:8081/api/event-seating
      - KEYCLOAK_ISSUER_URI=http://auth.ticketly.com:8080/realms/event-ticketing
      - KEYCLOAK_JWK_SET_URI=http://auth.ticketly.com:8080/realms/event-ticketing/protocol/openid-connect/certs
      - EVENT_PROJECTION_CLIENT_SECRET=${EVENT_PROJECTION_CLIENT_SECRET}
      - KAFKA_GROUP_ID=event-query-service
      - AWS_S3_PUBLIC_URL=https://${AWS_S3_BUCKET_NAME}.s3.ap-south-1.amazonaws.com
    networks:
      - infra-net
    extra_hosts:
      - "auth.ticketly.com:host-gateway"

  # Order Service
  order-service:
    image: ticketly/order-service:latest
    container_name: order-service
    ports:
      - "8084:8084"
    environment:
      - POSTGRES_DSN=postgres://ticketly:ticketly@ticketly-db:5432/order_service
      - REDIS_ADDR=redis:6379
      - KAFKA_ADDR=kafka:29092
      - OIDC_ISSUER=http://auth.ticketly.com:8080/realms/event-ticketing
      - KEYCLOAK_URL=http://auth.ticketly.com:8080
      - KEYCLOAK_REALM=event-ticketing
      - SEAT_SERVICE_URL=http://event-query-service:8082/api/event-query
      - QR_SECRET_KEY=4RJUEJDURgKarhbwx3fjKA8Fy/KoFwpAmOWAGwiWU9A=
      - TICKET_CLIENT_SECRET=${TICKET_CLIENT_SECRET}
      - TICKET_CLIENT_ID=ticket-service-client
    depends_on:
      ticketly-db:
        condition: service_healthy
      event-query-service:
        condition: service_healthy
    networks:
      - infra-net
    extra_hosts:
      - "auth.ticketly.com:host-gateway"

# -------------------------------------------
# Volumes & Networks
# -------------------------------------------
volumes:
  ticketly-postgres-data:
  redis-data:
  kafka-data:
  mongo-data:


networks:
  infra-net:
    driver: bridge
