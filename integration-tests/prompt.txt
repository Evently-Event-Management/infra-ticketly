I need an intergration testing app build with typescript to test the main flow of my application. What you  need tod do

first take following things from the env variables.

event-command-service-url = default to http://localhost:8081/api/event-seating
event-query-service-url = default to http://localhost:8082/api/event-query
tickets/order-service-url = default to http://localhost:8084/api/order
keycloak-token-url = default to http://localhost:8080/realms/event-ticketing/protocol/openid-connect/token
keycloak-client-id = default to login-testing
username = default to test_user@yopmail.com
password = default to test123
admin_username = default to admin@yopmail.com
admin_password = default to admin123
postgresql address = default to postgres://ticketly:ticketly@localhost:5432
mongodb address = default to mongodb://localhost:27017
redis address = default to redis://localhost:6379

This is what need to do.

A. Testing full CQRS flow
1. at first aquire oauth2 access token from keycloak using username and password and send it with all subsequent requests
2. then create a organization
- - /api/event-seating/v1/organizations (POST) request with body at integration-tests/requests/org/create-organization.json
- - respond would be like this
{"id":"9aa34205-fbcb-442d-a1fc-8045c888cb55","name":"Test Organization","logoUrl":null,"website":null,"createdAt":null,"updatedAt":null}
- - store organization name in a variable for future use
3. then check weather organization is available in postgresql database and load it's autogenerated id
- - select database event_service
- - select * from organizations where id = "our saved organization id"
- - respond is like This
[
  {
    "id": "00c9322e-6367-409a-bf74-8f57e42c474b",
    "name": "Test Organization",
    "logo_url": null,
    "website": null,
    "user_id": "aa4f4ed7-1c9d-4f1c-8b06-31ef679eea2f",
    "created_at": "2025-10-11 14:16:57.566838",
    "updated_at": "2025-10-11 14:16:57.566899"
  }
]
- - store id in a variable for future use

4. Now fetch the categories an select one category id form
- - /api/event-seating/v1/categories
- - respond would be like
[
  {
    "id": "e8c52c8a-7f1b-4b93-8a79-2f92d72a23c4",
    "name": "Entertainment & Lifestyle",
    "subCategories": [
      { "id": "1bcd98a0-43c3-41d2-9f2d-0b458c9c52b3", "name": "Music & Festivals" },
      { "id": "2394bca2-15b9-4ef6-a4f3-6cda3db812a0", "name": "Arts & Theatre" },
      { "id": "4d53b1e5-bb73-44de-b923-53a80b4147b9", "name": "Food & Drink" },
      { "id": "6504c9a8-6e5f-4a91-93ae-6d10b6fc621d", "name": "Sports & Fitness" },
      { "id": "8b24c7f7-10f0-4df5-91a2-9e5b18d82f22", "name": "Community & Social" }
    ]
  },
  {
    "id": "9a6d26c1-79eb-4d8d-b5c0-9e02a3c7a02b",
    "name": "Education & Professional",
    "subCategories": [
      { "id": "c86bcd8f-60b8-4d29-938a-b86a87e1e5e5", "name": "Workshops & Seminars" },
      { "id": "5e97a4ad-ec3c-4b6c-8c30-d19d4c6f4bb9", "name": "Conferences & Fairs" },
      { "id": "e1e72cb9-312f-4c4f-bda3-17346f5e4b1c", "name": "Online & Virtual Events" },
      { "id": "c7c50f07-2cbe-4f03-8d4c-99dd6f00f112", "name": "Trade Shows & Expos" },
      { "id": "b6ac41c3-cfc0-4e2e-93c4-9eac55f38ac8", "name": "Career & Academic" }
    ]
  }
]
- - store id of one subcategory in a variable for future use

5. then create an event using the organization id and subcategory id
- - this has request body at integration-tests/requests/event/create-event (POST) (replace organization id and subcategory id with the variables)
   - request body have the structure multipart/form-data HTTP request request body is at integration-tests/requests/event/create-event.txt
   no need to send image file
- - respond would be like this
{"id":"c3afc345-fb1a-4bde-98c0-ceb32cf622b8","title":"An Example Event","status":"PENDING","organizationId":"00c9322e-6367-409a-bf74-8f57e42c474b","createdAt":null,"updatedAt":null}
- - store event id in a variable for future use

6. then check weather event is available in postgresql database and load it's autogenerated id
- - select database event_service
- - select * from events where id = "our saved event id"
- - respond is like This
[
  {
    "id": "c3afc345-fb1a-4bde-98c0-ceb32cf622b8",
    "organization_id": "00c9322e-6367-409a-bf74-8f57e42c474b",
    "title": "An Example Event",
    "description": "This is a sample event description.",
    "overview": "An overview of the event goes here.",
    "status": "PENDING",
    "rejection_reason": null,
    "created_at": "2025-10-11 14:43:54.771954",
    "category_id": "08b80f14-421a-41fb-8c8e-bc74d4bb1b31",
    "updated_at": "2025-10-11 14:43:54.771980"
  }
]

- check whether its status is PENDING

7. Then check weather event is not present in mongodb database
- - use database event-seating
- - db.events.find({"_id":"our saved event id"})
- - respond would be like this
[]

8. then approve the event using admin user
- - aquire oauth2 access token from keycloak using admin_username and admin_password and send it with all subsequent requests
- - /api/event-seating/v1/events/{eventId}/approve (POST)
- - respond would be like this 
- - just 200 OK with no body

9. then check weather event is approved in postgresql database
- - select database event_service
- - select * from events where id = "our saved event id"
- - respond is like This
[
  {
    "id": "c3afc345-fb1a-4bde-98c0-ceb32cf622b8",
    "organization_id": "00c9322e-6367-409a-bf74-8f57e42c474b",
    "title": "An Example Event",
    "description": "This is a sample event description.",
    "overview": "An overview of the event goes here.",
    "status": "APPROVED",
    "rejection_reason": null,
    "created_at": "2025-10-11 14:43:54.771954",
    "category_id": "08b80f14-421a-41fb-8c8e-bc74d4bb1b31",
    "updated_at": "2025-10-11 15:03:21.381094"
  }
]
- check whether its status is APPROVED

(Log back in as test_user)

10. Then check weather event is present in mongodb database
- - use database event-seating
- - db.events.find({"_id":"our saved event id"})
- - respond would be like this
[
  {
    "_id": "c3afc345-fb1a-4bde-98c0-ceb32cf622b8",
    "_class": "com.ticketly.mseventseatingprojection.model.EventDocument",
    "category": {
      "_id": "08b80f14-421a-41fb-8c8e-bc74d4bb1b31",
      "name": "Music Festivals",
      "parentName": "Music"
    },
    "coverPhotos": [],
    "description": "This is a sample event description.",
    "discounts": [
      {
        "_id": "08790fbe-cbc8-46dc-aeaa-c7fbd5dc50f8",
        "code": "SAVE10",
        "parameters": {
          "type": "PERCENTAGE",
          "percentage": "10",
          "minSpend": "10"
        },
        "currentUsage": 0,
        "isActive": true,
        "isPublic": true,
        "applicableTiers": [
          {
            "_id": "de9d768e-d59d-4612-a054-33afada2612e",
            "name": "General Admission",
            "price": "100",
            "color": "#3B82F6"
          }
        ],
        "applicableSessionIds": ["3632aaa9-e642-47c8-850d-097d53dc8f1d"]
      }
    ],
    "organization": {
      "_id": "00c9322e-6367-409a-bf74-8f57e42c474b",
      "name": "Test Org",
      "userId": "aa4f4ed7-1c9d-4f1c-8b06-31ef679eea2f"
    },
    "overview": "An overview of the event goes here.",
    "sessions": [
      {
        "_id": "3632aaa9-e642-47c8-850d-097d53dc8f1d",
        "startTime": {"$date": "2025-12-03T13:30:00.000Z"},
        "endTime": {"$date": "2025-12-03T15:30:00.000Z"},
        "salesStartTime": {"$date": "2025-10-12T06:30:00.000Z"},
        "status": "SCHEDULED",
        "sessionType": "PHYSICAL",
        "venueDetails": {
          "name": "Grand hall",
          "address": "Maradana",
          "location": {
            "type": "Point",
            "coordinates": [79.8612, 6.9271]
          }
        },
        "layoutData": {
          "name": "Untitled Layout",
          "layout": {
            "blocks": [
              {
                "_id": "8cbf0f41-5d94-47dc-b27d-aadb925f7934",
                "name": "New seated grid",
                "type": "seated_grid",
                "position": {
                  "x": 86.6666259765625,
                  "y": 133.33335876464844
                },
                "rows": [
                  {
                    "_id": "2f9ed313-8741-4eb7-85b0-3b967d0497ed",
                    "label": "A",
                    "seats": [
                      {
                        "_id": "fd8e790a-dfa4-4701-94f3-ab909b5fccac",
                        "label": "1A",
                        "status": "RESERVED"
                      },
                      {
                        "_id": "d7b5e92b-f21e-4cee-9012-4bb58f0fecc1",
                        "label": "2A",
                        "status": "AVAILABLE",
                        "tier": {
                          "_id": "de9d768e-d59d-4612-a054-33afada2612e",
                          "name": "General Admission",
                          "price": "100",
                          "color": "#3B82F6"
                        }
                      }
                    ]
                  },
                  {
                    "_id": "52a731dd-b2ae-4fc7-8725-721009fc202e",
                    "label": "B",
                    "seats": [
                      {
                        "_id": "6484cd58-2f27-422e-836c-2916cb414ca4",
                        "label": "1B",
                        "status": "AVAILABLE",
                        "tier": {
                          "_id": "de9d768e-d59d-4612-a054-33afada2612e",
                          "name": "General Admission",
                          "price": "100",
                          "color": "#3B82F6"
                        }
                      },
                      {
                        "_id": "efa3a686-b901-4565-82fd-fbd852141e83",
                        "label": "2B",
                        "status": "AVAILABLE",
                        "tier": {
                          "_id": "de9d768e-d59d-4612-a054-33afada2612e",
                          "name": "General Admission",
                          "price": "100",
                          "color": "#3B82F6"
                        }
                      }
                    ]
                  }
                ],
                "seats": []
              },
              {
                "_id": "b3d9343b-8354-495c-8474-8d8696240fb9",
                "name": "stage",
                "type": "non_sellable",
                "position": {
                  "x": 25,
                  "y": 25
                },
                "rows": [],
                "seats": [],
                "width": 325,
                "height": 80
              }
            ]
          }
        }
      }
    ],
    "status": "APPROVED",
    "tiers": [
      {
        "_id": "de9d768e-d59d-4612-a054-33afada2612e",
        "name": "General Admission",
        "price": "100",
        "color": "#3B82F6"
      }
    ],
    "title": "An Example Event"
  }
]

11. then fetch the event using event-query-service
- - /api/event-query/v1/events/{eventId}/basic-info (GET)
- - respond would be like this
{
    "id": "c3afc345-fb1a-4bde-98c0-ceb32cf622b8",
    "title": "An Example Event",
    "description": "This is a sample event description.",
    "overview": "An overview of the event goes here.",
    "coverPhotos": [],
    "organization": {
        "id": "00c9322e-6367-409a-bf74-8f57e42c474b",
        "name": "Test Org",
        "logoUrl": null
    },
    "category": {
        "id": "08b80f14-421a-41fb-8c8e-bc74d4bb1b31",
        "name": "Music Festivals",
        "parentName": "Music"
    },
    "tiers": [
        {
            "id": "de9d768e-d59d-4612-a054-33afada2612e",
            "name": "General Admission",
            "price": 100,
            "color": "#3B82F6"
        }
    ],
    "availableDiscounts": [
        {
            "parameters": {
                "type": "PERCENTAGE",
                "percentage": 10,
                "minSpend": 10,
                "maxDiscount": null
            },
            "expiresAt": null,
            "maxUsage": null,
            "currentUsage": 0
        }
    ]
}


12. Now fetch the sessions of the event using event-query-service
- - /api/event-query/v1/events/{eventId}/sessions (GET)
- - respond would be like this
{
    "content": [
        {
            "id": "3632aaa9-e642-47c8-850d-097d53dc8f1d",
            "startTime": "2025-12-03T13:30:00Z",
            "endTime": "2025-12-03T15:30:00Z",
            "salesStartTime": "2025-10-12T06:30:00Z",
            "status": "SCHEDULED",
            "sessionType": "PHYSICAL",
            "venueDetails": {
                "name": "Grand hall",
                "address": "Maradana",
                "onlineLink": null,
                "location": {
                    "x": 79.8612,
                    "y": 6.9271,
                    "type": "Point",
                    "coordinates": [
                        79.8612,
                        6.9271
                    ]
                }
            },
            "discounts": [
                {
                    "parameters": {
                        "type": "PERCENTAGE",
                        "percentage": 10,
                        "minSpend": 10,
                        "maxDiscount": null
                    },
                    "expiresAt": null,
                    "maxUsage": null,
                    "currentUsage": 0
                }
            ]
        }
    ],
    "pageable": {
        "pageNumber": 0,
        "pageSize": 10,
        "sort": {
            "sorted": true,
            "empty": false,
            "unsorted": false
        },
        "offset": 0,
        "paged": true,
        "unpaged": false
    },
    "totalElements": 1,
    "totalPages": 1,
    "last": true,
    "size": 10,
    "number": 0,
    "sort": {
        "sorted": true,
        "empty": false,
        "unsorted": false
    },
    "numberOfElements": 1,
    "first": true,
    "empty": false
}

- - store session id in a variable for future use   
- - sessionId=3632aaa9-e642-47c8-850d-097d53dc8f1d

13. Then put the session ON_SALE
- - /api/event-seating/v1/sessions/{sessionId}/status (PUT)
- - request body is like this
{"status":"ON_SALE"}
- - respond would be like this
{"id":"3632aaa9-e642-47c8-850d-097d53dc8f1d","eventId":"c3afc345-fb1a-4bde-98c0-ceb32cf622b8","startTime":"2025-12-03T13:30:00Z","endTime":"2025-12-03T15:30:00Z","salesStartTime":"2025-10-12T06:30:00Z","sessionType":"PHYSICAL","status":"ON_SALE","venueDetails":{"address":"Maradana","name":"Grand hall","latitude":6.9271,"longitude":79.8612,"onlineLink":null},"layoutData":{"name":"Untitled Layout","layout":{"blocks":[{"id":"8cbf0f41-5d94-47dc-b27d-aadb925f7934","name":"New seated grid","type":"seated_grid","position":{"x":86.6666259765625,"y":133.33335876464844},"rows":[{"id":"2f9ed313-8741-4eb7-85b0-3b967d0497ed","label":"A","seats":[{"id":"fd8e790a-dfa4-4701-94f3-ab909b5fccac","label":"1A","tierId":null,"status":"RESERVED"},{"id":"d7b5e92b-f21e-4cee-9012-4bb58f0fecc1","label":"2A","tierId":"de9d768e-d59d-4612-a054-33afada2612e","status":"AVAILABLE"}]},{"id":"52a731dd-b2ae-4fc7-8725-721009fc202e","label":"B","seats":[{"id":"6484cd58-2f27-422e-836c-2916cb414ca4","label":"1B","tierId":"de9d768e-d59d-4612-a054-33afada2612e","status":"AVAILABLE"},{"id":"efa3a686-b901-4565-82fd-fbd852141e83","label":"2B","tierId":"de9d768e-d59d-4612-a054-33afada2612e","status":"AVAILABLE"}]}],"capacity":null,"seats":[],"width":null,"height":null,"soldCount":null,"tierId":null},{"id":"b3d9343b-8354-495c-8474-8d8696240fb9","name":"stage","type":"non_sellable","position":{"x":25.0,"y":25.0},"rows":[],"capacity":null,"seats":[],"width":325,"height":80,"soldCount":null,"tierId":null}]}}}
- - store session id in a variable for future use

14. Now fetch the seats of the session using event-query-service
- - /api/event-query/v1/sessions/3632aaa9-e642-47c8-850d-097d53dc8f1d/seating-map (GET)
- - respond would be like this
{"name":"Untitled Layout","layout":{"blocks":[{"id":"8cbf0f41-5d94-47dc-b27d-aadb925f7934","name":"New seated grid","type":"seated_grid","position":{"x":86.6666259765625,"y":133.33335876464844},"rows":[{"id":"2f9ed313-8741-4eb7-85b0-3b967d0497ed","label":"A","seats":[{"id":"fd8e790a-dfa4-4701-94f3-ab909b5fccac","label":"1A","status":"RESERVED","tier":null},{"id":"d7b5e92b-f21e-4cee-9012-4bb58f0fecc1","label":"2A","status":"AVAILABLE","tier":{"id":"de9d768e-d59d-4612-a054-33afada2612e","name":"General Admission","price":100,"color":"#3B82F6"}}]},{"id":"52a731dd-b2ae-4fc7-8725-721009fc202e","label":"B","seats":[{"id":"6484cd58-2f27-422e-836c-2916cb414ca4","label":"1B","status":"AVAILABLE","tier":{"id":"de9d768e-d59d-4612-a054-33afada2612e","name":"General Admission","price":100,"color":"#3B82F6"}},{"id":"efa3a686-b901-4565-82fd-fbd852141e83","label":"2B","status":"AVAILABLE","tier":{"id":"de9d768e-d59d-4612-a054-33afada2612e","name":"General Admission","price":100,"color":"#3B82F6"}}]}],"seats":[],"capacity":null,"width":null,"height":null},{"id":"b3d9343b-8354-495c-8474-8d8696240fb9","name":"stage","type":"non_sellable","position":{"x":25.0,"y":25.0},"rows":[],"seats":[],"capacity":null,"width":325,"height":80}]}}

NOTE: seat id is not what we used to create the event. seat id is autogenerated
 - - store seat id of an AVAILABLE seat in a variable for future use

 15. Now place an order for that seat using order-service
 - - /api/order (POST)
 - - request body is like this (replace eventId, sessionId, seatId with the variables)
{"event_id":"{event_id}","session_id":"{session_id}","seat_ids":["{seat_id}"],"discount_id":null}
- - respond would be like this
{"order_id":"941bdc16-707e-433f-9aec-cc970644cd4c","session_id":"3632aaa9-e642-47c8-850d-097d53dc8f1d","seat_ids":["6484cd58-2f27-422e-836c-2916cb414ca4"],"user_id":"aa4f4ed7-1c9d-4f1c-8b06-31ef679eea2f"}
- - store order id in a variable for future use

16. Then check whether order is present in postgresql database
- - select database order_service
- - select * from orders where order_id = "our saved order id"
- - respond is like This
[
  {
    "order_id": "941bdc16-707e-433f-9aec-cc970644cd4c",
    "user_id": "aa4f4ed7-1c9d-4f1c-8b06-31ef679eea2f",
    "event_id": "c3afc345-fb1a-4bde-98c0-ceb32cf622b8",
    "session_id": "3632aaa9-e642-47c8-850d-097d53dc8f1d",
    "status": "pending",
    "subtotal": 1000.00,
    "discount_id": null,
    "discount_code": null,
    "discount_amount": 0.00,
    "price": 1000.00,
    "created_at": "2025-10-11 15:26:35.480629",
    "payment_intent_id": "pi_3SH4gr0hvRtEQzCW0W7mDIx4"
  }
]
- - check weather its status is PENDING

17. Then check weather our seats are in tickets

- - select database order_service
- - select tier_id, seat_id, checked_in from tickets where order_id = '941bdc16-707e-433f-9aec-cc970644cd4c'
- - respond is like This
[
  {
    "tier_id": "de9d768e-d59d-4612-a054-33afada2612e",
    "seat_id": "6484cd58-2f27-422e-836c-2916cb414ca4",
    "checked_in": false
  }
]

18. Then confirm seats are locked in redis
- - redis-cli
- - EXISTS seat_lock:{seatId}
- - respond would be like this
- - default redis respond (what i see in datagrip is below)
[
  {
    "value": 1
  }
]

19. Check weather seat status is LOKED in mongodb
- - use database event-seating
- - db.events.find(
        {
            _id: "{event_id}",
            "sessions._id": "{session_id}",
            "sessions.layoutData.layout.blocks.rows.seats._id": { $in: ["{seat_id}"] }
            },
        { "sessions.$": 1 }
        );
- - respond would be like this
[
  {
    "_id": "c3afc345-fb1a-4bde-98c0-ceb32cf622b8",
    "sessions": [
      {
        "layoutData": {
          "layout": {
            "blocks": [
              {
                "rows": [
                  {
                    "seats": [
                      {
                        "_id": "fd8e790a-dfa4-4701-94f3-ab909b5fccac",
                        "label": "1A",
                        "status": "RESERVED"
                      },
                      {
                        "_id": "d7b5e92b-f21e-4cee-9012-4bb58f0fecc1",
                        "label": "2A",
                        "status": "LOCKED",
                        "tier": {
                          "_id": "de9d768e-d59d-4612-a054-33afada2612e",
                          "name": "General Admission",
                          "price": "1000",
                          "color": "#3B82F6"
                        }
                      }
                    ]
                  },
                  {
                    "seats": [
                      {
                        "_id": "6484cd58-2f27-422e-836c-2916cb414ca4",
                        "label": "1B",
                        "status": "AVAILABLE",
                        "tier": {
                          "_id": "de9d768e-d59d-4612-a054-33afada2612e",
                          "name": "General Admission",
                          "price": "1000",
                          "color": "#3B82F6"
                        }
                      },
                      {
                        "_id": "efa3a686-b901-4565-82fd-fbd852141e83",
                        "label": "2B",
                        "status": "AVAILABLE",
                        "tier": {
                          "_id": "de9d768e-d59d-4612-a054-33afada2612e",
                          "name": "General Admission",
                          "price": "1000",
                          "color": "#3B82F6"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "rows": []
              }
            ]
          }
        }
      }
    ]
  }
]


20 . Put a print statement here saying payment implementation skipped


21. Change the session status to CLOSED (Because then only we can delete the event)
- - /api/event-seating/v1/sessions/{sessionId}/status (PUT)
- - request body is like this
{"status":"CLOSED"}
- - respond would be like this
{"id":"3632aaa9-e642-47c8-850d-097d53dc8f1d","eventId":"c3afc345-fb1a-4bde-98c0-ceb32cf622b8","startTime":"2025-12-03T13:30:00Z","endTime":"2025-12-03T15:30:00Z","salesStartTime":"2025-10-12T06:30:00Z","sessionType":"PHYSICAL","status":"CLOSED","venueDetails":{"address":"Maradana","name":"Grand hall","latitude":6.9271,"longitude":79.8612,"onlineLink":null},"layoutData":{"name":"Untitled Layout","layout":{"blocks":[{"id":"8cbf0f41-5d94-47dc-b27d-aadb925f7934","name":"New seated grid","type":"seated_grid","position":{"x":86.6666259765625,"y":133.33335876464844},"rows":[{"id":"2f9ed313-8741-4eb7-85b0-3b967d0497ed","label":"A","seats":[{"id":"fd8e790a-dfa4-4701-94f3-ab909b5fccac","label":"1A","tierId":null,"status":"RESERVED"},{"id":"d7b5e92b-f21e-4cee-9012-4bb58f0fecc1","label":"2A","tierId":"de9d768e-d59d-4612-a054-33afada2612e","status":"AVAILABLE"}]},{"id":"52a731dd-b2ae-4fc7-8725-721009fc202e","label":"B","seats":[{"id":"6484cd58-2f27-422e-836c-2916cb414ca4","label":"1B","tierId":"de9d768e-d59d-4612-a054-33afada2612e","status":"AVAILABLE"},{"id":"efa3a686-b901-4565-82fd-fbd852141e83","label":"2B","tierId":"de9d768e-d59d-4612-a054-33afada2612e","status":"AVAILABLE"}]}],"capacity":null,"seats":[],"width":null,"height":null,"soldCount":null,"tierId":null},{"id":"b3d9343b-8354-495c-8474-8d8696240fb9","name":"stage","type":"non_sellable","position":{"x":25.0,"y":25.0},"rows":[],"capacity":null,"seats":[],"width":325,"height":80,"soldCount":null,"tierId":null}]}}}


22. Then check whether order is COMPLETED in postgresql database
- - select database event_service
- - select * from event_sessions where id = '{sessionId}'
- - respond is like This
[
  {
    "id": "3632aaa9-e642-47c8-850d-097d53dc8f1d",
    "event_id": "c3afc345-fb1a-4bde-98c0-ceb32cf622b8",
    "start_time": "2025-12-03 13:30:00.000000",
    "end_time": "2025-12-03 15:30:00.000000",
    "status": "CLOSED",
    "venue_details": {"name": "Grand hall", "address": "Maradana", "latitude": 6.9271, "longitude": 79.8612, "onlineLink": null},
    "session_type": "PHYSICAL",
    "sales_start_time": "2025-10-12 06:30:00.000000"
  }
]

- - check whether its status is CLOSED


23. Check weather session status is CLOSED in mongodb
- - (You know how to do)

24. Then delete the event
- - /api/event-seating/v1/events/{eventId} (DELETE)
- - respond would be like this
- - just 200 OK with no body

25. Then check weather event is deleted in postgresql database
- - select database event_service
- - select * from events where id = "our saved event id"
- - respond is like This
[]

26. Then check weather event is deleted in mongodb database
- - use database event-seating
- - db.events.find({"_id":"our saved event id"})
- - respond would be like this
[]

27. Delete the Organization
- - /api/event-seating/v1/organizations/{organizationId} (DELETE)
- - respond would be like this
- - just 200 OK with no body

If anything fails stop testing