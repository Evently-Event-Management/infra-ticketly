services:
  # MongoDB for Query Service
  query-db:
    image: mongo:latest
    container_name: query-mongodb
    volumes:
      - mongo-data:/data/db
    networks:
      - infra-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:latest
    container_name: event-seating-redis
    volumes:
      - redis-data:/data
    networks:
      - infra-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Broker in KRaft mode
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:29092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT://0.0.0.0:29092,CONTROLLER://kafka:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - infra-net
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 10

  # Kafka UI for easy topic management and message browsing
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9000:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - infra-net

  # Debezium for Change Data Capture (CDC)
  debezium-connect:
    image: debezium/connect:2.5
    container_name: debezium-connect
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
    networks:
      - infra-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Debezium connector registration service 
  debezium-connector-init:
    image: alpine:latest
    container_name: debezium-connector-init
    env_file:
      - .env
    depends_on:
      debezium-connect:
        condition: service_healthy
    volumes:
      - ./debezium:/debezium
      - ./scripts/init-debezium.sh:/scripts/init-debezium.sh
    command: >
      sh -c "
        apk add --no-cache curl gettext;
        /scripts/init-debezium.sh;
      "
    networks:
      - infra-net

  # API Gateway
  api-gateway:
    image: ticketly/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8088:8088"
    environment:
      - KEYCLOAK_ISSUER_URI=https://auth.dpiyumal.me/realms/event-ticketing
      - KEYCLOAK_JWK_SET_URI=https://auth.dpiyumal.me/realms/event-ticketing/protocol/openid-connect/certs
      - EVENT_SEATING_SERVICE_URI=http://event-command-service:8081
      - EVENT_QUERY_SERVICE_URI=http://event-query-service:8082
      - ORDER_SERVICE_URI=http://order-service:8084
      - PAYMENT_SERVICE_URI=http://payment-service:8085
      - LOG_LEVEL_ROOT=INFO
      - LOG_LEVEL_SPRING_CLOUD_GATEWAY=INFO
      - LOG_LEVEL_SPRING_HTTP_SERVER_REACTIVE=WARN
      - LOG_LEVEL_SPRING_WEB_REACTIVE=WARN
      - LOG_LEVEL_REACTOR_NETTY=WARN
      - LOG_LEVEL_REACTOR_NETTY_HTTP_CLIENT=WARN
      - LOG_LEVEL_SPRING_SECURITY=WARN
    networks:
      - infra-net

  # Go Scheduler Service
  scheduler-service:
    image: ticketly/scheduler-service:latest
    container_name: scheduler-service
    environment:
      - EVENT_SERVICE_URL=http://event-command-service:8081/api/event-seating
      - EVENT_QUERY_SERVICE_URL=http://event-query-service:8082/api/event-query
      - KEYCLOAK_URL=https://auth.dpiyumal.me
      - POSTGRES_DSN=postgres://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@${RDS_ENDPOINT}/scheduler_service
      - SCHEDULER_CLIENT_SECRET=${SCHEDULER_CLIENT_SECRET}
      - AWS_SQS_SESSION_SCHEDULING_ARN=${AWS_SQS_SESSION_SCHEDULING_ARN}
      - AWS_SQS_SESSION_SCHEDULING_URL=${AWS_SQS_SESSION_SCHEDULING_URL}
      - AWS_SQS_TRENDING_JOB_ARN=${AWS_SQS_TRENDING_JOB_ARN}
      - AWS_SQS_TRENDING_JOB_URL=${AWS_SQS_TRENDING_JOB_URL}
      - AWS_REGION=${AWS_REGION:-ap-south-1}
      - AWS_SCHEDULER_ROLE_ARN=${AWS_SCHEDULER_ROLE_ARN}
      - AWS_SCHEDULER_GROUP_NAME=${AWS_SCHEDULER_GROUP_NAME}
      - KAFKA_URL=kafka:29092
    volumes:
      - ~/.aws:/root/.aws:ro
    networks:
      - infra-net

  # Event Seating Service
  event-command-service:
    image: ticketly/event-command-service:latest
    container_name: event-command-service
    environment:
      - SERVER_PORT=8081
      - DATABASE_URL=jdbc:postgresql://${RDS_ENDPOINT}/event_service
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - JWT_ISSUER_URI=https://auth.dpiyumal.me/realms/event-ticketing
      - JWT_JWK_SET_URI=https://auth.dpiyumal.me/realms/event-ticketing/protocol/openid-connect/certs
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AWS_REGION=${AWS_REGION:-ap-south-1}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - SHOW_SQL=false
      - LOG_LEVEL_APP=DEBUG
      - LOG_LEVEL_SECURITY=WARN
      - KEYCLOAK_CLIENT_SECRET=${EVENTS_SERVICE_CLIENT_SECRET}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - GOOGLE_APPLICATION_CREDENTIALS=/config/gcp-credentials.json
      - LOG_LEVEL_ROOT=INFO
      - COM_TICKETLY_LOG_LEVEL=INFO
      - SPRING_SECURITY_LOG_LEVEL=WARN
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - infra-net
    volumes:
      - ~/.aws:/root/.aws:ro
      - ./credentials/gcp-credentials.json:/config/gcp-credentials.json:ro

  # Event Query Service
  event-query-service:
    image: ticketly/event-query-service:latest
    container_name: event-query-service
    depends_on:
      query-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MONGODB_URI=mongodb://query-db:27017/event-seating
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - COMMAND_SERVICE_URL=http://event-command-service:8081/api/event-seating
      - EVENT_PROJECTION_CLIENT_SECRET=${EVENT_PROJECTION_CLIENT_SECRET}
      - KEYCLOAK_ISSUER_URI=https://auth.dpiyumal.me/realms/event-ticketing
      - KEYCLOAK_JWK_SET_URI=https://auth.dpiyumal.me/realms/event-ticketing/protocol/openid-connect/certs
      - KAFKA_GROUP_ID=event-query-service
      - AWS_S3_PUBLIC_URL=https://${AWS_S3_BUCKET_NAME}.s3.${AWS_REGION}.amazonaws.com
      - ROOT_LOG_LEVEL=INFO
      - COM_TICKETLY_LOG_LEVEL=INFO
      - SPRING_SECURITY_LOG_LEVEL=WARN
      - MONGODB_LOG_LEVEL=WARN
      - GA_PROPERTY_ID=${GA_PROPERTY_ID}
      - GOOGLE_CLIENT_EMAIL=${GOOGLE_CLIENT_EMAIL}
      - GOOGLE_PRIVATE_KEY=${GOOGLE_PRIVATE_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_PRIVATE_KEY_ID=${GOOGLE_PRIVATE_KEY_ID}
    networks:
      - infra-net
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Order Service
  order-service:
    image: ticketly/order-service:latest
    container_name: order-service
    environment:
      - POSTGRES_DSN=postgres://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@${RDS_ENDPOINT}/order_service
      - REDIS_ADDR=redis:6379
      - KAFKA_ADDR=kafka:29092
      - OIDC_ISSUER=https://auth.dpiyumal.me/realms/event-ticketing
      - KEYCLOAK_URL=https://auth.dpiyumal.me
      - KEYCLOAK_REALM=event-ticketing
      - EVENT_SEATING_SERVICE_URL=http://event-command-service:8082/api/event-seating
      - EVENT_QUERY_SERVICE_URL=http://event-query-service:8082/api/event-query
      - QR_SECRET_KEY=4RJUEJDURgKarhbwx3fjKA8Fy/KoFwpAmOWAGwiWU9A=
      - TICKET_CLIENT_SECRET=${TICKET_CLIENT_SECRET}
      - TICKET_CLIENT_ID=ticket-service-client
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SEAT_LOCK_TTL_MINUTES=5
    networks:
      - infra-net

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - "${DOCKER_SOCKET_PATH:-/var/run/docker.sock}:/var/run/docker.sock:ro"
    ports:
      - "9999:8080"
    networks:
      - infra-net

volumes:
  redis-data:
  kafka-data:
  mongo-data:

networks:
  infra-net:
    driver: bridge
