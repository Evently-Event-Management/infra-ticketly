services:
  # Keycloak Database
  keycloak-db:
    image: postgres:17
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak123
    volumes:
      - keycloak-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - infra-net

  # Keycloak Server
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.1
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak123
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HOSTNAME: localhost
    ports:
      - "8080:8080"
    command: start-dev
    depends_on:
      keycloak-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080 && exec 3<&- && exec 3>&-"]
      interval: 15s
      timeout: 5s
      retries: 10
    networks:
      - infra-net

  # Event Seating PostgreSQL
  event-seating-db:
    image: postgres:17
    container_name: event-seating-postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: event_seating
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    command: postgres -c wal_level=logical
    volumes:
      - event-seating-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - infra-net

  # MongoDB for Query Service
  query-db:
    image: mongo:latest
    container_name: query-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - infra-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Localstack for AWS Services
  event-seating-localstack:
    image: localstack/localstack:latest
    container_name: event-seating-localstack
    environment:
      - DEBUG=1
      - SERVICES=s3,sqs,scheduler,iam
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PERSISTENCE=1
    ports:
      - '4566:4566'
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./scripts/localstack:/etc/localstack/init/ready.d"
      - localstack-data:/var/lib/localstack
    networks:
      - infra-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:latest
    container_name: event-seating-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - infra-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Broker in KRaft mode
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:29092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT://0.0.0.0:29092,CONTROLLER://kafka:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - infra-net
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 10

  # Kafka UI for easy topic management and message browsing
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9000:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - infra-net

  # Debezium for Change Data Capture (CDC)
  debezium-connect:
    image: debezium/connect:2.5
    container_name: debezium-connect
    ports:
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
      event-seating-db:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
    networks:
      - infra-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Debezium connector registration service
  debezium-connector-init:
    image: curlimages/curl:latest
    container_name: debezium-connector-init
    depends_on:
      debezium-connect:
        condition: service_healthy
    volumes:
      - ./debezium:/debezium
    command: >
      sh -c "
        echo 'Waiting for Debezium Connect to start...' &&
        sleep 30 &&
        curl -X POST -H 'Content-Type: application/json' --data @/debezium/debezium.json http://debezium-connect:8083/connectors &&
        echo 'Connector registration complete!'
      "
    networks:
      - infra-net

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8088:8088"
    environment:
      - KEYCLOAK_ISSUER_URI=http://localhost:8080/realms/event-ticketing
      - KEYCLOAK_JWK_SET_URI=http://keycloak:8080/realms/event-ticketing/protocol/openid-connect/certs
      - EVENT_SEATING_SERVICE_URI=http://host.docker.internal:8081
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      - infra-net
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Go Scheduler Service
  scheduler-service:
    image: ticketly/scheduler-service:latest
    container_name: scheduler-service
    depends_on:
      keycloak:
        condition: service_healthy
      event-seating-localstack:
        condition: service_healthy
    environment:
      - AWS_ENDPOINT_URL=http://event-seating-localstack:4566
      - EVENT_SERVICE_URL=http://host.docker.internal:8081/api/event-seating
      - KEYCLOAK_URL=http://keycloak:8080
      - SCHEDULER_CLIENT_SECRET=${SCHEDULER_CLIENT_SECRET}
    networks:
      - infra-net
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Projection Service
  projection-service:
    image: projection-service:latest
    container_name: projection-service
    depends_on:
      query-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      - MONGODB_URI=mongodb://query-db:27017/event-seating
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KEYCLOAK_ISSUER_URI=http://keycloak:8080/realms/event-ticketing
      - COMMAND_SERVICE_URL=http://host.docker.internal:8081/api/event-seating
      - EVENT_PROJECTION_CLIENT_SECRET=${EVENT_PROJECTION_CLIENT_SECRET}
    networks:
      - infra-net
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  keycloak-postgres-data:
  event-seating-postgres-data:
  redis-data:
  kafka-data:
  localstack-data:
  mongo-data:

networks:
  infra-net:
    driver: bridge
